{"version":3,"sources":["Components/NewTaskForm.js","Components/Task.js","Components/TaskList.js","Components/TasksFilter.js","Components/Footer.js","Components/App/App.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","e","setState","target","value","onSubmit","preventDefault","props","onItemAdd","className","this","type","onChange","required","placeholder","Component","Task","el","cb","id","console","log","formatDistanceToNow","time","onDeleted","onActiveCounter","done","checked","editing","onItemEditButton","classNames","onClick","autoFocus","tick","TaskList","todos","onDeletedId","elements","map","item","key","filterButtons","name","TasksFilter","filter","onFilterChange","buttons","TasksFilterClear","onClearCompleted","Footer","activeItem","App","maxId","todoData","createTodoItem","deleteItem","idx","findIndex","slice","addItem","text","newItem","items","onEditToggle","element","oldItem","newArray","filterToDos","todo","Date","now","visibleItems","doneItem","length","React","ReactDOM","render","document","getElementById"],"mappings":"kNAEqBA,E,4MACjBC,MAAM,CACJC,MAAM,I,EAERC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAACH,MAAOE,EAAEE,OAAOC,S,EAInCC,SAAW,SAACJ,GAERA,EAAEK,iBACL,EAAKC,MAAMC,UAAU,EAAKV,MAAMC,OAC7B,EAAKG,SAAS,CACVH,MAAM,M,uDAQV,OACI,yBAAQU,UAAU,SAAlB,UACI,uCACA,sBACAJ,SAAUK,KAAKL,SADf,SAGI,uBAAOM,KAAK,OACRF,UAAU,WACVG,SAAUF,KAAKV,cACfa,UAAQ,EACRC,YAAY,yBACZV,MAAOM,KAAKZ,MAAMC,iB,GAjCDgB,a,wBCEpBC,E,4MAgBjBlB,MAAQ,CACJC,MAAO,I,EAGXC,cAAgB,SAACiB,GACb,EAAKf,SAAS,CACVH,MAAOkB,EAAGd,OAAOC,S,EAIzBC,SAAW,SAACY,GACRA,EAAGX,iBADY,IAEPP,EAAU,EAAKD,MAAfC,MACR,EAAKG,SAAS,CAAEH,MAAO,MAEvBmB,EADW,EAAKX,MAAMP,eACnB,EAAKO,MAAMY,GAAIpB,I,qDAnBjB,OADDqB,QAAQC,IAAI,QACJC,YAAoBZ,KAAKH,MAAMgB,Q,+BAgCjC,IAAD,EAEkFb,KAAKH,MAArFR,EAFF,EAEEA,MAAQyB,EAFV,EAEUA,UAAWC,EAFrB,EAEqBA,gBAAiBC,EAFtC,EAEsCA,KAAMC,EAF5C,EAE4CA,QAASC,EAFrD,EAEqDA,QAASC,EAF9D,EAE8DA,iBAC/DC,EAAa,GAKjB,OAJIJ,IACAI,GAAc,aAKd,oBAAIrB,UAAWqB,EAAf,SACI,sBAAKrB,UAAU,OAAf,UACI,uBACIA,UAAU,SACVE,KAAK,WACLoB,QAAWN,EACXE,QAAWA,IAEf,kCACKC,EACG,sBAAMvB,SAAUK,KAAKL,SAArB,SACI,uBACIM,KAAK,OAELC,SAAUF,KAAKV,cACfgC,WAAS,EACTnB,UAAQ,EACRC,YAAaf,EACbK,MAAOM,KAAKZ,MAAMC,OAASA,MAInC,sBAAMU,UAAU,cAAhB,SAA+BV,IAEnC,sBAAMU,UAAU,UAAhB,SAA2BC,KAAKuB,YAEpC,wBAAQxB,UAAU,iBAAiBsB,QAASF,EAAkBlB,KAAK,WAGnE,wBAAQA,KAAM,SACNF,UAAU,oBACVsB,QAAWP,a,GArFLT,aC+BnBmB,EA9BE,SAAC,GACwD,IADtDC,EACqD,EADrDA,MAAOC,EAC8C,EAD9CA,YACLX,EAAmD,EAAnDA,gBAAgBI,EAAmC,EAAnCA,iBAAiB7B,EAAkB,EAAlBA,cAO7CqC,EAAWF,EAAMG,KAAI,SAACC,GAAQ,IAE1BpB,EAAoBoB,EAApBpB,GAFyB,YAELoB,EAFK,QAIhC,OACS,wBAAC,EAAD,2BACQA,GADR,IAEIC,IAAKD,EAAKpB,GACVK,UAAY,kBAAIY,EAAYjB,IAC5BM,gBAAiB,kBAAIA,EAAgBN,IACrCnB,cAAeA,EACf6B,iBAAkB,kBAAMA,EAAiBV,UAKzD,OACI,oBAAIV,UAAU,YAAd,SACK4B,KC5BPI,EAAgB,CAClB,CAAEC,KAAM,MAAO3C,MAAO,OACtB,CAAE2C,KAAM,SAAU3C,MAAO,UACzB,CAAE2C,KAAM,YAAa3C,MAAO,cAI1B4C,EAAc,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,eAOrBC,EAAUL,EAAcH,KAAI,YAAqB,IAAlBI,EAAiB,EAAjBA,KAAM3C,EAAW,EAAXA,MAGjC+B,EAAU,UADCY,IAASE,EACO,WAAa,IAE9C,OACI,6BACI,wBAEInC,UAAWqB,EACXC,QAAS,WACLc,EAAeH,IAEnB/B,KAAK,SANT,SAQKZ,GAPI2C,QAYrB,OAAO,oBAAIjC,UAAU,UAAd,SAAyBqC,KAG9BC,EAAkB,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,iBAAkBjD,EAAW,EAAXA,MACpC,OACI,wBACIU,UAAY,kBACZsB,QAAW,kBAAIiB,KAFnB,SAGKjD,KCdFkD,EAxBA,SAAC,GACgC,IAD/BC,EAC8B,EAD9BA,WAAWF,EACmB,EADnBA,iBACRH,EAA2B,EAA3BA,eAAeD,EAAY,EAAZA,OAS/B,OACI,yBAAQnC,UAAU,SAAlB,UACI,uBAAMA,UAAU,aAAhB,UAA8ByC,EAA9B,iBACA,cAAC,EAAD,CACIN,OAAQA,EACRC,eAAgBA,IACxB,cAAC,EAAD,CACQpC,UAAY,kBACZV,MAAQ,kBACRiD,iBAAkBA,QClBbG,E,4MAEjBC,MAAQ,I,EACRtD,MAAQ,CACJuD,SAAU,CACN,EAAKC,eAAe,mBACpB,EAAKA,eAAe,mBACpB,EAAKA,eAAe,oBAExBV,OAAQ,O,EAcZW,WAAa,SAACpC,GAEV,EAAKjB,UAAS,YAAe,IAAbmD,EAAY,EAAZA,SAENG,EAAMH,EAASI,WAAU,SAACxC,GAAD,OAAMA,EAAGE,KAAKA,KAE9C,MAAO,CACHkC,SAFW,sBAAOA,EAASK,MAAM,EAAEF,IAAxB,YAAgCH,EAASK,MAAMF,EAAI,U,EASzEG,QAAU,SAACC,GACN,IAAMC,EAAU,EAAKP,eAAeM,GAEpC,EAAK1D,UAAS,YAAe,IAAbmD,EAAY,EAAZA,SAKZ,MAAO,CAACA,SAJG,sBACLA,GADK,CAERQ,S,EAOZhC,iBAAmB,SAACV,GAChB,EAAKjB,UAAS,SAACJ,GAEX,MAAO,CAAEgE,MADK,EAAKC,aAAa5C,Q,EAKxCnB,cAAgB,SAACmB,EAAIpB,GACjB,EAAK8B,iBAAiBV,GACtB,EAAKjB,UAAS,SAACJ,GACX,IAAMkE,EAAUlE,EAAMuD,SAASI,WAAU,SAACxC,GAAD,OAAQA,EAAGE,KAAOA,KACrDoB,EAAI,2BAAQzC,EAAMuD,SAASW,IAAvB,IAAiCjE,UAE3C,MAAO,CAAEsD,SADE,sBAAOvD,EAAMuD,SAASK,MAAM,EAAGM,IAA/B,CAAyCzB,GAAzC,YAAkDzC,EAAMuD,SAASK,MAAMM,EAAU,U,EAKpGvC,gBAAkB,SAACN,GAEf,EAAKjB,UAAS,YAAiB,IAAdmD,EAAa,EAAbA,SACPG,EAAMH,EAASI,WAAU,SAACxC,GAAD,OAAMA,EAAGE,KAAKA,KAEvC8C,EAAUZ,EAASG,GACnBK,EAAO,2BACNI,GADM,IAETvC,MAAOuC,EAAQvC,KACfC,SAAUsC,EAAQtC,UAUtB,MAAO,CACH0B,SANU,sBAAOA,EAASK,MAAM,EAAEF,IAAxB,CACVK,GADU,YAEPR,EAASK,MAAMF,EAAI,U,EAUlCO,aAAe,SAAC5C,GAEZ,EAAKjB,UAAS,YAAiB,IAAdmD,EAAa,EAAbA,SACPG,EAAMH,EAASI,WAAU,SAACxC,GAAD,OAAMA,EAAGE,KAAKA,KAEvC8C,EAAUZ,EAASG,GACnBK,EAAO,2BACNI,GADM,IAETrC,SAAUqC,EAAQrC,UAQtB,MAAO,CACHyB,SANU,sBAAOA,EAASK,MAAM,EAAEF,IAAxB,CACVK,GADU,YAEPR,EAASK,MAAMF,EAAI,U,EAUlCR,iBAAmB,WACf,EAAK9C,UAAS,YAAgB,IACpBgE,EADmB,EAAbb,SACcT,QAAO,SAAA3B,GAAE,OAAgB,IAAZA,EAAGS,QAE1C,OADAN,QAAQC,IAAI,iBAAkB6C,GACtB,CAACb,SAAUa,O,EAI3BrB,eAAiB,SAACD,GACd,EAAK1C,SAAS,CAAC0C,WACfxB,QAAQC,IAAI,SAASuB,I,EAIzBuB,YAAc,SAAChC,EAAOS,GAClB,MAAe,QAAXA,EACOT,EAEI,WAAXS,EACOT,EAAMS,QAAO,SAAAwB,GAAI,OAAKA,EAAK1C,QAEvB,cAAXkB,EACOT,EAAMS,QAAO,SAAAwB,GAAI,OAAIA,EAAK1C,aADrC,G,6DA7HY3B,GACZ,MAAO,CACHA,QACA2B,MAAM,EACNP,GAAIT,KAAK0C,QACT7B,KAAM8C,KAAKC,MACX3C,SAAS,EACTC,SAAS,K,+BA2HP,IAAD,EAE8BlB,KAAKZ,MAAhCuD,EAFH,EAEGA,SAAUT,EAFb,EAEaA,OAAQrB,EAFrB,EAEqBA,KACpBgD,EAAe7D,KAAKyD,YAAYd,EAAUT,GAC1C4B,EAAWnB,EAAST,QAAO,SAAC3B,GAAD,OAAOA,EAAGS,QAAM+C,OAC3CvB,EAAaG,EAASoB,OAAOD,EAEnC,OACI,0BAAS/D,UAAU,UAAnB,UACI,cAAC,EAAD,CACIyC,WAAYA,EACZ1C,UAAaE,KAAKiD,UACtB,cAAC,EAAD,CACIpC,KAAMA,EACNY,MAASoC,EACTnC,YAAa1B,KAAK6C,WAClB9B,gBAAiBf,KAAKe,gBACtBzB,cAAeU,KAAKV,cACpB6B,iBAAkBnB,KAAKmB,mBAK3B,cAAC,EAAD,CACIe,OAAUA,EACVM,WAAYA,EACZF,iBAAkBtC,KAAKsC,iBACvBH,eAAgBnC,KAAKmC,wB,GAzKR6B,IAAM3D,WCJvC4D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.532e740d.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\r\n\r\nexport default class NewTaskForm extends Component {\r\n    state={\r\n      label:\"\"\r\n    };\r\n    onLabelChange = (e)=>{\r\n        this.setState({label: e.target.value\r\n        });\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n\r\n        e.preventDefault()\r\n     this.props.onItemAdd(this.state.label)\r\n        this.setState({\r\n            label:''\r\n        })\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <header className=\"header\">\r\n                <h1>todos</h1>\r\n                <form\r\n                onSubmit={this.onSubmit} >\r\n\r\n                    <input type=\"text\"\r\n                        className=\"new-todo\"\r\n                        onChange={this.onLabelChange}\r\n                        required\r\n                        placeholder=\"What needs to be done?\"\r\n                        value={this.state.label}/>\r\n                </form>\r\n            </header>\r\n\r\n        );\r\n    };\r\n};\r\n\r\n","import React,{Component} from \"react\";\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Task extends Component{\r\n    static propTypes = {\r\n        onDeleted: PropTypes.func.isRequired,\r\n        onActiveCounter: PropTypes.func.isRequired,\r\n        checked: PropTypes.bool.isRequired,\r\n\r\n        done: PropTypes.bool.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        classNames: PropTypes.string.isRequired,\r\n    };\r\n    tick() {\r\n        console.log(\"tick\")\r\n         return formatDistanceToNow(this.props.time)\r\n\r\n    }\r\n\r\n    state = {\r\n        label: '',\r\n    };\r\n\r\n    onLabelChange = (el) => {\r\n        this.setState({\r\n            label: el.target.value,\r\n        });\r\n    };\r\n\r\n    onSubmit = (el) => {\r\n        el.preventDefault();\r\n        const { label } = this.state;\r\n        this.setState({ label: '' });\r\n        const cb = this.props.onLabelChange;\r\n        cb(this.props.id, label);\r\n    };\r\n\r\n\r\n    // componentDidMount() {\r\n    //     const {updateInterval} = this.props\r\n    //     this.timerID = setInterval(() => this.tick(), updateInterval)\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //     clearInterval(this.timerID)\r\n    // }\r\n\r\n    render() {\r\n\r\n        const {label,  onDeleted, onActiveCounter, done, checked, editing, onItemEditButton} = this.props;\r\n        let classNames = \"\"\r\n        if (done) {\r\n            classNames += 'completed';\r\n        };\r\n\r\n        return (\r\n\r\n            <li className={classNames}>\r\n                <div className=\"view\">\r\n                    <input\r\n                        className=\"toggle\"\r\n                        type=\"checkbox\"\r\n                        onClick = {onActiveCounter}\r\n                        checked = {checked}\r\n                    />\r\n                    <label >\r\n                        {editing ? (\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    // className=\"edit\"\r\n                                    onChange={this.onLabelChange}\r\n                                    autoFocus\r\n                                    required\r\n                                    placeholder={label}\r\n                                    value={this.state.label || label}\r\n                                />\r\n                            </form>\r\n                        ) : (\r\n                            <span className=\"description\">{label}</span>\r\n                        )}\r\n                        <span className=\"created\">{this.tick()}</span>\r\n                    </label>\r\n                    <button className=\"icon icon-edit\" onClick={onItemEditButton} type=\"submit\">\r\n\r\n                    </button>\r\n                    <button type ='button'\r\n                            className=\"icon icon-destroy\"\r\n                            onClick = {onDeleted}>\r\n\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        );\r\n    };\r\n};\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport Task from \"../Components/Task\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TaskList = ({ todos, onDeletedId,\r\n                      onActiveCounter,onItemEditButton,onLabelChange})=> {\r\n    TaskList.propTypes = {\r\n        onDeletedId: PropTypes.func.isRequired,\r\n        onActiveCounter: PropTypes.func.isRequired,\r\n        todos: PropTypes.object.isRequired,\r\n    };\r\n\r\n    const elements = todos.map((item)=>{\r\n\r\n       const {id, ...itemProps} = item;\r\n\r\n       return(\r\n                <Task\r\n                    {...item}\r\n                    key={item.id}\r\n                    onDeleted ={()=>onDeletedId(id)}\r\n                    onActiveCounter={()=>onActiveCounter(id)}\r\n                    onLabelChange={onLabelChange}\r\n                    onItemEditButton={() => onItemEditButton(id)}\r\n                />\r\n       );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"todo-list\">\r\n            {elements}\r\n        </ul>\r\n    );\r\n};\r\nexport default TaskList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst filterButtons = [\r\n    { name: 'all', label: 'All' },\r\n    { name: 'active', label: 'Active' },\r\n    { name: 'completed', label: 'Completed' },\r\n];\r\n\r\n\r\nconst TasksFilter = ({ filter, onFilterChange }) => {\r\n\r\n    TasksFilter.propTypes = {\r\n        onFilterChange: PropTypes.func.isRequired,\r\n        filter: PropTypes.bool.isRequired,\r\n    };\r\n\r\n    const buttons = filterButtons.map(({ name, label}) => {\r\n\r\n        const isActive = name === filter;\r\n        const classNames = `${isActive ? 'selected' : ''}`;\r\n\r\n        return (\r\n            <li>\r\n                <button\r\n                    key={name}\r\n                    className={classNames}\r\n                    onClick={() => {\r\n                        onFilterChange(name);\r\n                    }}\r\n                    type=\"submit\"\r\n                >\r\n                    {label}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n    return <ul className=\"filters\">{buttons}</ul>;\r\n};\r\n\r\nconst TasksFilterClear =({onClearCompleted, label}) => {\r\n        return (\r\n            <button\r\n                className = 'clear-completed'\r\n                onClick = {()=>onClearCompleted()}>\r\n                {label}\r\n            </button>\r\n        );\r\n};\r\n\r\nexport {TasksFilter, TasksFilterClear}\r\n","import React from \"react\";\r\n\r\nimport {TasksFilter, TasksFilterClear} from \"./TasksFilter\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n\r\nconst Footer = ({activeItem,onClearCompleted,\r\n                    onFilterChange,filter}) => {\r\n\r\n    Footer.propTypes = {\r\n        onClearCompleted: PropTypes.func.isRequired,\r\n        onFilterChange: PropTypes.func.isRequired,\r\n        filter: PropTypes.bool.isRequired,\r\n        activeItem: PropTypes.func.isRequired,\r\n    };\r\n\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span className=\"todo-count\">{activeItem} items left</span>\r\n            <TasksFilter\r\n                filter={filter}\r\n                onFilterChange={onFilterChange}/>\r\n        <TasksFilterClear\r\n                className = \"clear-completed\"\r\n                label = \"Clear Completed\"\r\n                onClearCompleted={onClearCompleted}/>\r\n         </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport NewTaskForm from \"../NewTaskForm\";\r\n\r\nimport './App.css'\r\nimport TaskList from \"../TaskList\";\r\nimport Footer from \"../Footer\";\r\n\r\n\r\nexport default class App extends React.Component {\r\n\r\n    maxId = 100;\r\n    state = {\r\n        todoData: [\r\n            this.createTodoItem(\"Completed task1\"),\r\n            this.createTodoItem(\"Completed task2\"),\r\n            this.createTodoItem(\"Completed task3\"),\r\n        ],\r\n        filter: 'all',\r\n    };\r\n\r\n    createTodoItem (label) {\r\n        return {\r\n            label,\r\n            done: false,\r\n            id: this.maxId++,\r\n            time: Date.now(),\r\n            checked: false,\r\n            editing: false\r\n        };\r\n    };\r\n\r\n    deleteItem = (id) =>{\r\n\r\n        this.setState(({todoData})=>{\r\n\r\n            const idx = todoData.findIndex((el)=>el.id===id);\r\n            const newArray = [...todoData.slice(0,idx),...todoData.slice(idx+1)];\r\n           return {\r\n               todoData:newArray\r\n           };\r\n\r\n        });\r\n\r\n    };\r\n\r\n    addItem = (text)=>{\r\n         const newItem = this.createTodoItem(text);\r\n\r\n         this.setState(({todoData})=>{\r\n            const newArr = [\r\n                ...todoData,\r\n                newItem\r\n            ];\r\n             return {todoData: newArr}\r\n\r\n         });\r\n    };\r\n\r\n    onItemEditButton = (id) => {\r\n        this.setState((state) => {\r\n            const items = this.onEditToggle(id);\r\n            return { items };\r\n        });\r\n    };\r\n\r\n    onLabelChange = (id, label) => {\r\n        this.onItemEditButton(id);\r\n        this.setState((state) => {\r\n            const element = state.todoData.findIndex((el) => el.id === id);\r\n            const item = { ...state.todoData[element], label };\r\n            const items = [...state.todoData.slice(0, element), item, ...state.todoData.slice(element + 1)];\r\n            return { todoData: items };\r\n        });\r\n    };\r\n\r\n    onActiveCounter = (id) => {\r\n\r\n        this.setState(({ todoData })=>{\r\n            const idx = todoData.findIndex((el)=>el.id===id);\r\n\r\n            const oldItem = todoData[idx];\r\n            const newItem = {\r\n                ...oldItem,\r\n                done: !oldItem.done,\r\n                checked: !oldItem.checked,\r\n\r\n            };\r\n\r\n\r\n            const newArray = [...todoData.slice(0,idx),\r\n                newItem,\r\n                ...todoData.slice(idx+1)\r\n            ];\r\n\r\n            return {\r\n                todoData:newArray\r\n            };\r\n        });\r\n\r\n    };\r\n\r\n    onEditToggle = (id) => {\r\n\r\n        this.setState(({ todoData })=>{\r\n            const idx = todoData.findIndex((el)=>el.id===id);\r\n\r\n            const oldItem = todoData[idx];\r\n            const newItem = {\r\n                ...oldItem,\r\n                editing: !oldItem.editing,\r\n            };\r\n\r\n            const newArray = [...todoData.slice(0,idx),\r\n                newItem,\r\n                ...todoData.slice(idx+1)\r\n            ];\r\n\r\n            return {\r\n                todoData:newArray\r\n            };\r\n        });\r\n\r\n    };\r\n\r\n    onClearCompleted = () => {\r\n        this.setState(({todoData})=> {\r\n            const newArray = todoData.filter(el => el.done === false);\r\n            console.log(\"clearCompleted\", newArray)\r\n            return ({todoData: newArray});\r\n        });\r\n    };\r\n\r\n    onFilterChange = (filter) => {\r\n        this.setState({filter});\r\n        console.log(\"filter\",filter)\r\n\r\n    }\r\n\r\n    filterToDos = (todos, filter) => {\r\n        if (filter === 'all'){\r\n            return todos;\r\n        }\r\n        if (filter === 'active'){\r\n            return todos.filter(todo => !todo.done)\r\n        }\r\n        if (filter === 'completed'){\r\n            return todos.filter(todo => todo.done)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { todoData, filter, time } = this.state;\r\n        const visibleItems = this.filterToDos(todoData, filter)\r\n        const doneItem = todoData.filter((el)=> el.done).length;\r\n        const activeItem = todoData.length-doneItem;\r\n\r\n        return(\r\n            <section className=\"todoapp\">\r\n                <NewTaskForm\r\n                    activeItem={activeItem}\r\n                    onItemAdd = {this.addItem}/>\r\n                <TaskList\r\n                    time={time}\r\n                    todos = {visibleItems}\r\n                    onDeletedId={this.deleteItem}\r\n                    onActiveCounter={this.onActiveCounter}\r\n                    onLabelChange={this.onLabelChange}\r\n                    onItemEditButton={this.onItemEditButton}/>\r\n\r\n\r\n\r\n\r\n                <Footer\r\n                    filter = {filter}\r\n                    activeItem={activeItem}\r\n                    onClearCompleted={this.onClearCompleted}\r\n                    onFilterChange={this.onFilterChange}/>\r\n            </section>\r\n        );\r\n    };\r\n\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}