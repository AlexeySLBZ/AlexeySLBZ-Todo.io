{"version":3,"sources":["Components/NewTaskForm.js","Components/Task.js","Components/TaskList.js","Components/TasksFilter.js","Components/Footer.js","Components/App/App.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","e","setState","target","value","onSubmit","preventDefault","props","onItemAdd","className","this","type","onChange","required","placeholder","Component","Task","el","id","onDeleted","onActiveCounter","done","checked","editing","classNames","onClick","autoFocus","formatDistanceToNow","time","TaskList","todos","onDeletedId","elements","map","item","key","filterButtons","name","TasksFilter","filter","onFilterChange","buttons","TasksFilterClear","onClearCompleted","Footer","activeItem","App","maxId","todoData","createTodoItem","deleteItem","idx","findIndex","slice","addItem","text","newItem","onItemEditButton","element","oldItem","onEditToggle","filterToDos","todo","Date","now","visibleItems","doneItem","length","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd961342.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class NewTaskForm extends Component {\n  state = {\n    label: '',\n  };\n\n  onLabelChange = (e) => {\n    this.setState({ label: e.target.value });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.onItemAdd(this.state.label);\n    this.setState({\n      label: '',\n    });\n  };\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.onSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            onChange={this.onLabelChange}\n            required\n            placeholder=\"What needs to be done?\"\n            value={this.state.label}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport PropTypes from 'prop-types';\n\nexport default class Task extends Component {\n  static propTypes = {\n    onDeleted: PropTypes.func.isRequired,\n    onActiveCounter: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    editing: PropTypes.bool.isRequired,\n    done: PropTypes.bool.isRequired,\n    label: PropTypes.string.isRequired,\n    classNames: PropTypes.string.isRequired,\n  };\n\n  state = {\n    label: '',\n  };\n\n  onLabelChange = (el) => {\n    this.setState({\n      label: el.target.value,\n    });\n  };\n\n  onSubmit = (el) => {\n    const { id, onLabelChange } = this.props;\n    el.preventDefault();\n    const { label } = this.state;\n    this.setState({ label: '' });\n    const cb = onLabelChange;\n    cb(id, label);\n  };\n\n  render() {\n    const {\n      label,\n      onDeleted,\n      onActiveCounter,\n      done,\n      checked,\n      editing,\n    } = this.props;\n    let classNames = '';\n    if (done) {\n      classNames += 'completed';\n    }\n\n    return (\n      <li className={classNames}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            onClick={onActiveCounter}\n            checked={checked}\n          />\n          <label>\n            {editing ? (\n              <form onSubmit={this.onSubmit}>\n                <input\n                  type=\"text\"\n                  // className=\"edit\"\n                  onChange={this.onLabelChange}\n                  autoFocus\n                  required\n                  placeholder={label}\n                  value={this.state.label || label}\n                />\n              </form>\n            ) : (\n              <span className=\"description\">{label}</span>\n            )}\n            <span className=\"created\">\n              {formatDistanceToNow(this.props.time)}\n            </span>\n          </label>\n          <button className=\"icon icon-edit\" type=\"submit\" />\n          <button\n            type=\"button\"\n            className=\"icon icon-destroy\"\n            onClick={onDeleted}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n","import React from 'react';\n\nimport Task from './Task';\nimport PropTypes from 'prop-types';\n\nconst TaskList = ({\n  todos, onDeletedId, onActiveCounter, onLabelChange, \n}) => {\n  TaskList.propTypes = {\n    onDeletedId: PropTypes.func.isRequired,\n    onActiveCounter: PropTypes.func.isRequired,\n    todos: PropTypes.object.isRequired,\n  };\n\n  const elements = todos.map((item) => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <Task\n        {...item}\n        key={item.id}\n        onDeleted={() => onDeletedId(id)}\n        onActiveCounter={() => onActiveCounter(id)}\n        onLabelChange={onLabelChange}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{elements}</ul>;\n};\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst filterButtons = [\n  { name: 'all', label: 'All' },\n  { name: 'active', label: 'Active' },\n  { name: 'completed', label: 'Completed' },\n];\n\nconst TasksFilter = ({ filter, onFilterChange }) => {\n  TasksFilter.propTypes = {\n    onFilterChange: PropTypes.func.isRequired,\n    filter: PropTypes.bool.isRequired,\n  };\n\n  const buttons = filterButtons.map(({ name, label }) => {\n    const isActive = name === filter;\n    const classNames = `${isActive ? 'selected' : ''}`;\n\n    return (\n      <li>\n        <button\n          key={name}\n          className={classNames}\n          onClick={() => {\n            onFilterChange(name);\n          }}\n          type=\"submit\"\n        >\n          {label}\n        </button>\n      </li>\n    );\n  });\n  return <ul className=\"filters\">{buttons}</ul>;\n};\n\nconst TasksFilterClear = ({ onClearCompleted, label }) => {\n  return (\n    <button className=\"clear-completed\" onClick={() => onClearCompleted()}>\n      {label}\n    </button>\n  );\n};\n\nexport { TasksFilter, TasksFilterClear };\n","import React from 'react';\n\nimport { TasksFilter, TasksFilterClear } from './TasksFilter';\nimport PropTypes from 'prop-types';\n\nconst Footer = ({\n  activeItem, onClearCompleted, onFilterChange, filter, \n}) => {\n  Footer.propTypes = {\n    onClearCompleted: PropTypes.func.isRequired,\n    onFilterChange: PropTypes.func.isRequired,\n    filter: PropTypes.bool.isRequired,\n    activeItem: PropTypes.func.isRequired,\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{activeItem} items left</span>\n      <TasksFilter filter={filter} onFilterChange={onFilterChange} />\n      <TasksFilterClear\n        className=\"clear-completed\"\n        label=\"Clear Completed\"\n        onClearCompleted={onClearCompleted}\n      />\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport NewTaskForm from '../NewTaskForm';\n\nimport './App.css';\nimport TaskList from '../TaskList';\nimport Footer from '../Footer';\n\nexport default class App extends React.Component {\n  maxId = 100;\n\n  state = {\n    todoData: [\n      this.createTodoItem('Completed task1'),\n      this.createTodoItem('Completed task2'),\n      this.createTodoItem('Completed task3'),\n    ],\n    filter: 'all',\n  };\n\n  createTodoItem(label) {\n    return {\n      label,\n      done: false,\n      id: this.maxId++,\n      time: Date.now(),\n      checked: false,\n      editing: false,\n    };\n  }\n\n  deleteItem = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((el) => el.id === id);\n      const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  addItem = (text) => {\n    const newItem = this.createTodoItem(text);\n\n    this.setState(({ todoData }) => {\n      const newArr = [...todoData, newItem];\n      return { todoData: newArr };\n    });\n  };\n\n  onLabelChange = (id, label) => {\n    this.onItemEditButton(id);\n    this.setState((state) => {\n      const element = state.todoData.findIndex((el) => el.id === id);\n      const item = { ...state.todoData[element], label };\n      const items = [\n        ...state.todoData.slice(0, element),\n        item,\n        ...state.todoData.slice(element + 1),\n      ];\n      return { todoData: items };\n    });\n  };\n\n  onActiveCounter = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((el) => el.id === id);\n\n      const oldItem = todoData[idx];\n      const newItem = {\n        ...oldItem,\n        done: !oldItem.done,\n        checked: !oldItem.checked,\n      };\n\n      const newArray = [\n        ...todoData.slice(0, idx),\n        newItem,\n        ...todoData.slice(idx + 1),\n      ];\n\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  onEditToggle = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((el) => el.id === id);\n\n      const oldItem = todoData[idx];\n      const newItem = {\n        ...oldItem,\n        editing: !oldItem.editing,\n      };\n\n      const newArray = [\n        ...todoData.slice(0, idx),\n        newItem,\n        ...todoData.slice(idx + 1),\n      ];\n\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  onClearCompleted = () => {\n    this.setState(({ todoData }) => {\n      const newArray = todoData.filter((el) => el.done === false);\n      return { todoData: newArray };\n    });\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  filterToDos = (todos, filter) => {\n    if (filter === 'all') {\n      return todos;\n    }\n    if (filter === 'active') {\n      return todos.filter((todo) => !todo.done);\n    }\n    if (filter === 'completed') {\n      return todos.filter((todo) => todo.done);\n    }\n  };\n\n  render() {\n    const { todoData, filter, time } = this.state;\n    const visibleItems = this.filterToDos(todoData, filter);\n    const doneItem = todoData.filter((el) => el.done).length;\n    const activeItem = todoData.length - doneItem;\n\n    return (\n      <section className=\"todoapp\">\n        <NewTaskForm activeItem={activeItem} onItemAdd={this.addItem} />\n        <TaskList\n          time={time}\n          todos={visibleItems}\n          onDeletedId={this.deleteItem}\n          onActiveCounter={this.onActiveCounter}\n          onLabelChange={this.onLabelChange}\n        />\n        <Footer\n          filter={filter}\n          activeItem={activeItem}\n          onClearCompleted={this.onClearCompleted}\n          onFilterChange={this.onFilterChange}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}